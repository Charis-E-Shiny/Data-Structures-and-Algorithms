#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_INSTRUCTIONS 100
#define STAGES 5

const char *stageNames[] = {"IF", "ID", "EX", "MEM", "WB"};

typedef struct {
    char text[100];
    int stage;
    int completed;
} Instruction;

int main() {
    Instruction instructions[MAX_INSTRUCTIONS];
    int num;

    printf("Enter number of instructions: ");
    scanf("%d", &num);
    getchar();

    for (int i = 0; i < num; i++) {
        printf("Enter instruction %d: ", i + 1);
        fgets(instructions[i].text, sizeof(instructions[i].text), stdin);
        instructions[i].text[strcspn(instructions[i].text, "\n")] = '\0';
        instructions[i].stage = -1;
        instructions[i].completed = 0;
    }

    printf("\n--- Pipeline Simulation ---\n");

    int clock = 0;
    int completed = 0;

    // To store pipeline status
    char pipeline[MAX_INSTRUCTIONS][MAX_INSTRUCTIONS + STAGES][10] = {""};

    while (completed < num) {
        for (int i = 0; i < num; i++) {
            if (instructions[i].completed) continue;

            if (clock >= i && instructions[i].stage < STAGES) {
                instructions[i].stage++;
                strcpy(pipeline[i][clock], stageNames[instructions[i].stage]);

                if (instructions[i].stage == STAGES - 1) {
                    instructions[i].completed = 1;
                    completed++;
                }
            } else if (clock >= i) {
                strcpy(pipeline[i][clock], " "); // empty stage
            }
        }

        clock++;
    }

    // Print table header
    printf("\n%-20s", "Instruction");
    for (int c = 0; c < clock; c++) {
        printf("C%-3d ", c + 1);
    }
    printf("\n");

    // Print table rows
    for (int i = 0; i < num; i++) {
        printf("%-20s", instructions[i].text);
        for (int c = 0; c < clock; c++) {
            if (strlen(pipeline[i][c]) == 0)
                printf("%-5s", " ");
            else
                printf("%-5s", pipeline[i][c]);
        }
        printf("\n");
    }

    printf("\nAll instructions completed in %d clock cycles.\n", clock);

    return 0;
}
